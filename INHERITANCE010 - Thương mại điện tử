/* chat gpt làm 
import java.util.*;

abstract class Product {
    protected String name;
    protected double price;
    protected int quantity;

    public Product(String name, double price, int quantity) {
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }

    public abstract double calculateCost(int quantity);

    public void displayDetails() {
        System.out.println("Name: " + name);
        System.out.println("Price: $" + price);
        System.out.println("Available Quantity: " + quantity);
    }

    public String getName() {
        return name;
    }

    public int getQuantity() {
        return quantity;
    }

    public void reduceQuantity(int amount) {
        this.quantity -= amount;
    }
}

class Book extends Product {
    private String author;

    public Book(String name, double price, int quantity, String author) {
        super(name, price, quantity);
        this.author = author;
    }

    @Override
    public double calculateCost(int quantity) {
        return price * quantity;
    }

    @Override
    public void displayDetails() {
        super.displayDetails();
        System.out.println("Author: " + author);
    }
}

class Electronics extends Product {
    private String brand;

    public Electronics(String name, double price, int quantity, String brand) {
        super(name, price, quantity);
        this.brand = brand;
    }

    @Override
    public double calculateCost(int quantity) {
        return price * quantity * 1.1;
    }

    @Override
    public void displayDetails() {
        super.displayDetails();
        System.out.println("Brand: " + brand);
    }
}

class User {
    private String username;
    private double totalSpent;

    public User(String username) {
        this.username = username;
        this.totalSpent = 0.0;
    }

    public void buyProduct(Product product, int quantity) {
        if (quantity <= product.getQuantity()) {
            double cost = product.calculateCost(quantity);
            totalSpent += cost;
            product.reduceQuantity(quantity);
            System.out.println("User: " + username + " bought " + quantity + " " + product.getName() + " for $" + cost);
        } else {
            System.out.println("Insufficient quantity of " + product.getName() + " available.");
        }
    }

    public double getTotalSpent() {
        return totalSpent;
    }

    public String getUsername() {
        return username;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int testCase = Integer.parseInt(sc.nextLine());

        while (testCase-- > 0) {
            // Create products
            // Tạo danh sách sản phẩm
Electronics laptop = new Electronics("laptop", 20.0, 10, "Dell");
            Book harryPotter = new Book("Harry Potter", 10.0, 12, "camnh");

            List<Product> products = new ArrayList<>();
            products.add(laptop);
            products.add(harryPotter);

            // Tạo người dùng
            User user1 = new User("Alice");
            User user2 = new User("Bob");
            User user3 = new User("Charlie");

            // Giao dịch
            user1.buyProduct(laptop, 3);
            user1.buyProduct(harryPotter, 10);
            user2.buyProduct(laptop, 1);
            user3.buyProduct(harryPotter, 5);

            System.out.println("====");

            // In người dùng theo tổng chi giảm dần (không dùng sort có sẵn)
            User[] users = {user1, user2, user3};
            for (int i = 0; i < users.length - 1; i++) {
                for (int j = i + 1; j < users.length; j++) {
                    if (users[i].getTotalSpent() < users[j].getTotalSpent()) {
                        User tmp = users[i];
                        users[i] = users[j];
                        users[j] = tmp;
                    }
                }
            }

            System.out.println("Users with Highest Total Spent:");
            for (int i = 0; i < users.length; i++) {
                System.out.println((i + 1) + ". " + users[i].getUsername() + ": $" + users[i].getTotalSpent());
            }

            System.out.println("====");

            // In thông tin sản phẩm còn lại
           for (int i = 0; i < products.size(); i++) {
    		products.get(i).displayDetails();
    			if (i != products.size() - 1) {
        		System.out.println("---");
    					}
						}
        }

    }
}
*/

// học và tối ưu 



	import java.util.*;
    
     abstract class  Product {
        protected String name ; 
        protected double price ;
        protected int quantity;
        public Product(String name  , double price , int quantity){
            this.name = name ;
            this.price = price;
            this.quantity = quantity;
        }
        public String getName(){
            return this.name;
        }
        public double getPrice(){
            return this.price;
        }
        public int getQuantity(){
            return this.quantity;
        }
        // phuong thuc truu tuong 
        public abstract  double calculateCost(int quantity);
        
        public void displayDetails(){
            System.out.print("Name: "+ this.name
                              + "\nPrice: $" + this.price
                              + "\nAvailable Quantity: " + this.quantity);
        } 
        public void da_mua(int a){
                this.quantity -= a;
            }
    }
        
        class Book extends Product{
            private String author;
            public Book(String name , double price , int quantity , String author){
                super(name,price,quantity);
                this.author = author;
            }
           @Override
            public double calculateCost(int quantity){
                return this.price * quantity ;
            }
            public void displayDetails(){
                super.displayDetails();
                System.out.println("\nAuthor: " + this.author);
            }
           
           
        }
        
        class Electronics extends Product{
            private String brand;
            public Electronics(String name , double price , int quantity , String brand){
                super(name,price,quantity);
                this.brand = brand;
            }
            @Override
            public double calculateCost(int quantity){
                return this.price * quantity * 1.1;
            }
            @Override
            public void displayDetails(){
                super.displayDetails();
                System.out.println("\nBrand: " + this.brand);
            }
            
        }
        
        class User{
            private String username;
            private double totalspent;
            public User(String username){
                this.username = username;
                this.totalspent = 0;
            }
            public String getUsername(){
                return  this.username;
            }
            public double getTotalspent(){
                return this.totalspent;
            }
                
            public void buyProduct(Product p , int quantity){
                if(  quantity <= p.getQuantity() ){
                    p.da_mua(quantity);                  
                    double totalPrice  = p.calculateCost(quantity);
                    this.totalspent += totalPrice;
System.out.println("User: "+this.username+" bought "+quantity+" "+p.getName() + " for $"+ totalPrice  );
                }else
                    System.out.println("Insufficient quantity of " + p.getName() +" available.");
            }
        }
            
      public class Main{
          public static void main(String[] args){
              Scanner ip = new Scanner(System.in);
              int t = ip.nextInt();
             // ip.nextLine();
                  while(t--> 0){
                      Electronics  laptop = new Electronics("laptop" , 20  , 10 ,"Dell");
                      Book HarryPotter = new Book("Harry Potter" , 10 , 12 ,"camnh");
                      //laptop.displayDetails();
                      //HarryPotter.displayDetails();
                      User user1 = new User("Alice");
                      User user2 = new User("Bob");
                      User user3 = new User("Charlie");
                      
                      user1.buyProduct(laptop , 3 );
                      user1.buyProduct(HarryPotter, 10);
                      user2.buyProduct(laptop,1);
                      user3.buyProduct(HarryPotter , 5);
                      
						System.out.println("====");
                        System.out.println("Users with Highest Total Spent:");
                      ArrayList<User> sapxep = new ArrayList<>();
                      sapxep.add(user1);
                      sapxep.add(user2);
                      sapxep.add(user3);
                      sapxep.sort((t1,t2) -> Double.compare(t2.getTotalspent() , 
                                                             t1.getTotalspent() ));
                      int i=1 ; 
                      for( User a : sapxep ){
                System.out.println( i+". "+ a.getUsername()+ ": $" + a.getTotalspent());
                          i++;
                      }
                      
                      System.out.println("====");
                      ArrayList<Product> p = new ArrayList<>();
                      p.add(laptop);
                      p.add(HarryPotter);
                      int k = 1 ;
                      for( Product a : p ){
                         a.displayDetails();                         
                         if( k <= p.size()-1 )
                          System.out.println("---");
                          k++;
                      }
                  }
              
          }
      }      
            
            
            
   
